!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AR	Makefile	/^AR 			= ar -rcsv$/;"	m
ARRC	libft/Makefile	/^ARRC	= ar rcs$/;"	m
CC	libft/Makefile	/^CC		= gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS 		= -Wall -Wextra -Werror -g$/;"	m
CFLAGS	libft/Makefile	/^CFLAGS	= -Wall -Wextra -Werror$/;"	m
DEC_BASE	includes/ft_printf.h	/^#define DEC_BASE /;"	d
HDRS	Makefile	/^HDRS		= includes$/;"	m
HEX_BASE	includes/ft_printf.h	/^#define HEX_BASE /;"	d
LIBFT_H	libft/libft.h	/^# define LIBFT_H$/;"	d
NAME	Makefile	/^NAME 		= libftprintf.a$/;"	m
NAME	libft/Makefile	/^NAME	= libft.a$/;"	m
OBJS	Makefile	/^OBJS 		= $(SRCS:%.c=%.o)$/;"	m
OBJS	libft/Makefile	/^OBJS	= ${SRCS:.c=.o}$/;"	m
RM	libft/Makefile	/^RM		= rm -f$/;"	m
SRCS	Makefile	/^SRCS		= $(wildcard .\/srcs\/*.c)$/;"	m
SRCS	libft/Makefile	/^SRCS	= $(wildcard .\/*.c)$/;"	m
TYPES	includes/ft_printf.h	/^#define TYPES /;"	d
aux_split	libft/ft_split.c	/^void			aux_split(char **res, char const *s, int nos, char c)$/;"	f
char_family_allocation	srcs/aux_memory.c	/^void	char_family_allocation(t_info *tr, va_list *pargs)$/;"	f
check_set	libft/ft_strtrim.c	/^static	int	check_set(const char *s1, char const *set, int i, int step)$/;"	f	file:
check_sign	libft/ft_itoa.c	/^static	char	*check_sign(char *iter, int sign)$/;"	f	file:
check_sub	libft/ft_strnstr.c	/^static int	check_sub(const char *haystack, const char *needle, int len)$/;"	f	file:
cleans_info_with_prios	srcs/input_validation.c	/^void			cleans_info_with_prios(t_info *tr)$/;"	f
content	includes/ft_printf.h	/^	void			*content;$/;"	m	struct:s_info
content	libft/libft.h	/^	void 			*content;$/;"	m	struct:s_list
count_separators	libft/ft_split.c	/^static	int		count_separators(const char *s, char c)$/;"	f	file:
creates_buffer	srcs/buffer.c	/^char	*creates_buffer(t_info *info)$/;"	f
ft_atoi	libft/ft_atoi.c	/^int			ft_atoi(const char *str)$/;"	f
ft_bzero	libft/ft_bzero.c	/^void	ft_bzero(void *s, size_t n)$/;"	f
ft_calloc	libft/ft_calloc.c	/^void	*ft_calloc(size_t count, size_t size)$/;"	f
ft_isalnum	libft/ft_isalnum.c	/^int		ft_isalnum(int c)$/;"	f
ft_isalpha	libft/ft_isalpha.c	/^int	ft_isalpha(int c)$/;"	f
ft_isascii	libft/ft_isascii.c	/^int		ft_isascii(int c)$/;"	f
ft_isdigit	libft/ft_atoi.c	/^static	int	ft_isdigit(char chr)$/;"	f	file:
ft_isdigit	libft/ft_isdigit.c	/^int		ft_isdigit(int c)$/;"	f
ft_isprint	libft/ft_isprint.c	/^int		ft_isprint(int c)$/;"	f
ft_issign	libft/ft_atoi.c	/^static	int	ft_issign(char chr)$/;"	f	file:
ft_isspace	libft/ft_atoi.c	/^static	int	ft_isspace(int chr)$/;"	f	file:
ft_itoa	libft/ft_itoa.c	/^char			*ft_itoa(int n)$/;"	f
ft_lstadd_back	libft/ft_lstadd_back.c	/^void	ft_lstadd_back(t_list **lst, t_list *new)$/;"	f
ft_lstadd_front	libft/ft_lstadd_front.c	/^void	ft_lstadd_front(t_list **lst, t_list *new)$/;"	f
ft_lstclear	libft/ft_lstclear.c	/^void	ft_lstclear(t_list **lst, void (*del)(void *))$/;"	f
ft_lstdelone	libft/ft_lstdelone.c	/^void	ft_lstdelone(t_list *lst, void (*del)(void *))$/;"	f
ft_lstiter	libft/ft_lstiter.c	/^void	ft_lstiter(t_list *lst, void (*f)(void *))$/;"	f
ft_lstlast	libft/ft_lstlast.c	/^t_list	*ft_lstlast(t_list *lst)$/;"	f
ft_lstmap	libft/ft_lstmap.c	/^t_list	*ft_lstmap(t_list *lst, void *(*f)(void *), void (*del)(void *))$/;"	f
ft_lstnew	libft/ft_lstnew.c	/^t_list	*ft_lstnew(void *content)$/;"	f
ft_lstsize	libft/ft_lstsize.c	/^int	ft_lstsize(t_list *lst)$/;"	f
ft_max	libft/ft_max.c	/^int ft_max(int args, ...)$/;"	f
ft_memccpy	libft/ft_memccpy.c	/^void	*ft_memccpy(void *dst, const void *src, int c, size_t n)$/;"	f
ft_memchr	libft/ft_memchr.c	/^void	*ft_memchr(const void *s, int c, size_t n)$/;"	f
ft_memcmp	libft/ft_memcmp.c	/^int		ft_memcmp(const void *s1, const void *s2, size_t n)$/;"	f
ft_memcpy	libft/ft_memcpy.c	/^void	*ft_memcpy(void *dst, const void *src, size_t n)$/;"	f
ft_memmove	libft/ft_memmove.c	/^void	*ft_memmove(void *dst, const void *src, size_t len)$/;"	f
ft_memset	libft/ft_memset.c	/^void	*ft_memset(void *b, int c, size_t len)$/;"	f
ft_min	libft/ft_min.c	/^int ft_min(int args, ...)$/;"	f
ft_printf	srcs/ft_printf.c	/^int		ft_printf(char *str, ...)$/;"	f
ft_putchar_fd	libft/ft_putchar_fd.c	/^void	ft_putchar_fd(char c, int fd)$/;"	f
ft_putendl_fd	libft/ft_putendl_fd.c	/^void	ft_putendl_fd(char *s, int fd)$/;"	f
ft_putnbr_fd	libft/ft_putnbr_fd.c	/^void	ft_putnbr_fd(int nb, int fd)$/;"	f
ft_putstr_fd	libft/ft_putstr_fd.c	/^void	ft_putstr_fd(char *s, int fd)$/;"	f
ft_reallocates_memory	srcs/aux_memory.c	/^void	*ft_reallocates_memory(void *old, size_t count, size_t size, int offset)$/;"	f
ft_split	libft/ft_split.c	/^char			**ft_split(char const *s, char c)$/;"	f
ft_strchr	libft/ft_strchr.c	/^char	*ft_strchr(const char *s, int c)$/;"	f
ft_strdup	libft/ft_strdup.c	/^char	*ft_strdup(const char *s1)$/;"	f
ft_strjoin	libft/ft_strjoin.c	/^char	*ft_strjoin(char const *s1, char const *s2)$/;"	f
ft_strlcat	libft/ft_strlcat.c	/^size_t	ft_strlcat(char *dst, const char *src, size_t dstsize)$/;"	f
ft_strlcpy	libft/ft_strlcpy.c	/^size_t	ft_strlcpy(char *dst, const char *src, size_t dstsize)$/;"	f
ft_strlen	libft/ft_strlen.c	/^size_t	ft_strlen(const char *s)$/;"	f
ft_strmapi	libft/ft_strmapi.c	/^char	*ft_strmapi(char const *s, char (*f)(unsigned int, char))$/;"	f
ft_strncmp	libft/ft_strncmp.c	/^int		ft_strncmp(const char *s1, const char *s2, size_t n)$/;"	f
ft_strnstr	libft/ft_strnstr.c	/^char		*ft_strnstr(const char *haystack, const char *needle, size_t len)$/;"	f
ft_strrchr	libft/ft_strrchr.c	/^char	*ft_strrchr(const char *s, int c)$/;"	f
ft_strrev	libft/ft_strrev.c	/^char	*ft_strrev(char *s1)$/;"	f
ft_strtrim	libft/ft_strtrim.c	/^char		*ft_strtrim(char const *s1, char const *set)$/;"	f
ft_substr	libft/ft_substr.c	/^char	*ft_substr(char const *s, unsigned int start, size_t len)$/;"	f
ft_tolower	libft/ft_tolower.c	/^char	ft_tolower(int c)$/;"	f
ft_toupper	libft/ft_toupper.c	/^char	ft_toupper(int c)$/;"	f
general_attributions	srcs/input_validation.c	/^static	void	general_attributions(t_info *tr)$/;"	f	file:
general_cleaning	srcs/input_validation.c	/^static	void	general_cleaning(t_info *tr)$/;"	f	file:
handle_copies	libft/ft_split.c	/^static	void	handle_copies(char **array, const char *s, int size)$/;"	f	file:
handle_negatives	libft/ft_itoa.c	/^static	char	*handle_negatives(char *iter, int *n)$/;"	f	file:
initializes_tr	srcs/aux_memory.c	/^void	initializes_tr(t_info *tr)$/;"	f
int_family_allocation	srcs/aux_memory.c	/^void	int_family_allocation(t_info *tr, va_list *pargs)$/;"	f
invalid	includes/ft_printf.h	/^	int				invalid;$/;"	m	struct:s_info
len	includes/ft_printf.h	/^	int				len;$/;"	m	struct:s_info
main	main.c	/^int		main()$/;"	f
main	playground/0_vargs.c	/^int		main()$/;"	f
main	playground/1_validity.c	/^int		main()$/;"	f
main	playground/3_5_hoist_the_types.c	/^int		main()$/;"	f
main	playground/3_printf_flags.c	/^int		main()$/;"	f
main	playground/4_capture_the_flag.c	/^int		main()$/;"	f
main	playground/5_pink_flag.c	/^int		main()$/;"	f
main	playground/6_money_printer_goes_brrrrrr.c	/^int		main()$/;"	f
main	playground/7_weird_case.c	/^int		main()$/;"	f
main	playground/8_bitmasks.c	/^int		main()$/;"	f
main	playground/9_last.c	/^int		main()$/;"	f
main	playground/tests_params.c	/^int		main()$/;"	f
minus	includes/ft_printf.h	/^	int				minus;$/;"	m	struct:s_info
negative	includes/ft_printf.h	/^	int				negative;$/;"	m	struct:s_info
next	libft/libft.h	/^	struct s_list	*next;$/;"	m	struct:s_list	typeref:struct:s_list::s_list
number_of_chars	libft/ft_itoa.c	/^static	int		number_of_chars(int n)$/;"	f	file:
number_to_string	srcs/aux_base_conversion.c	/^void	number_to_string(t_info *tr, unsigned int content, char *base)$/;"	f
p_aster	includes/ft_printf.h	/^	int				p_aster;$/;"	m	struct:s_info
p_inp	includes/ft_printf.h	/^	int				p_inp;$/;"	m	struct:s_info
parses_string	srcs/parsers.c	/^void			parses_string(t_info *tr, char *str, va_list *pargs)$/;"	f
prec	includes/ft_printf.h	/^	int				prec;$/;"	m	struct:s_info
prints_params	srcs/ft_printf.c	/^void	prints_params(t_info *tr)$/;"	f
retrieves_flags	srcs/parsers.c	/^static	void	retrieves_flags(t_info *tr, char *str, int *i)$/;"	f	file:
retrieves_prec	srcs/parsers.c	/^static	void	retrieves_prec(t_info *tr, char *str, int *i, va_list *pargs)$/;"	f	file:
retrieves_type	srcs/parsers.c	/^static	void	retrieves_type(t_info *tr, char *str, int *i, va_list *pargs)$/;"	f	file:
retrieves_width	srcs/parsers.c	/^static	void	retrieves_width(t_info *tr, char *str, int *i, va_list *pargs)$/;"	f	file:
s_info	includes/ft_printf.h	/^typedef struct	s_info{$/;"	s
s_list	libft/libft.h	/^typedef struct	s_list {$/;"	s
size	includes/ft_printf.h	/^	int				size;$/;"	m	struct:s_info
string_cleaning	srcs/input_validation.c	/^static	void	string_cleaning(t_info *tr)$/;"	f	file:
strrev	libft/ft_itoa.c	/^static	char	*strrev(char *s1)$/;"	f	file:
t_info	includes/ft_printf.h	/^}				t_info;$/;"	t	typeref:struct:s_info
t_list	libft/libft.h	/^}				t_list;$/;"	t	typeref:struct:s_list
testing_args	playground/0_vargs.c	/^void	testing_args(char *str, ...)$/;"	f
tests_buffer	srcs/tests_buffer.c	/^char	*tests_buffer(char *str, ...)$/;"	f
type	includes/ft_printf.h	/^	char			type;$/;"	m	struct:s_info
w_aster	includes/ft_printf.h	/^	int				w_aster;$/;"	m	struct:s_info
w_inp	includes/ft_printf.h	/^	int				w_inp;$/;"	m	struct:s_info
width	includes/ft_printf.h	/^	int				width;$/;"	m	struct:s_info
zero	includes/ft_printf.h	/^	int				zero;$/;"	m	struct:s_info
